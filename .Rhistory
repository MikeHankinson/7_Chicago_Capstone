abline(h=0, lty=2)  # abline() adds line to an existing graph
# - Demonstrates positive and negative factors
# - This appears to be an ideal solution for determining important variables for
#   the prediction of life expectancy.
# g. Bi plot of Loadings and Component scores
# ...............................
# biplot for components 1 and 2
biplot(dat2014N.pca)
# Result:
# For PC1 and PC2, the map contains 3 distinct areas of life expectancy factors.
# From there, the countries are non-distinguishable within this plot.
# 6. Supervised Modeling
# ..........................................
# ***Note to instructors:  I am unsure how to use PCA analysis as input for reduced factors
# within my multivariate model.***
# a. Perform Multivariate Linear Regression Modeling
# ...............................
# i. Obtain Predictor Correlations
# . . . . . . . . . . . . . . . .
cor(dat2014N[4:22])
# Entire correlation data too busy.
# Obtain correlation vector for Life.expectancy only.
life_cor <- cor(dat2014N[4:22])[1,]
# Life.expectancy             Adult.Mortality
# 1.00000000                     -0.77006889
# infant.deaths               Alcohol
# -0.20094246                      0.52951003
# percentage.expenditure      Hepatitis.B
# 0.41259578                      0.25209759
# Measles                     BMI
# -0.04875626                      0.55522649
# under.five.deaths           Polio
# -0.22857019                      0.38515579
# Total.expenditure           Diphtheria
# 0.31931099                      0.34246355
# HIV.AIDS                    GDP
# -0.61710562                      0.44377093
# Population                  thinness..1.19.years
# -0.03599048                     -0.43694419
# thinness.5.9.years          Income.composition.of.resources
# -0.46095903                      0.89201700
# Schooling
# 0.80179634
# Notes:
#   - Education and income index have the strongest positive correlation to life expectancy.
#   - Adult mortality and HIV/AIDS have strongest negative correlation to life expectancy.
# ii.Restricted Model: Perform Linear Model (training data, top 3 +/- correlated predictors)
# . . . . . . . . . . . . . . . .
# Perform linear model using
#   - training data
#   - top 3 positive and negatively correlated predictors to life expectancy
train.2014.restricted.lm <- lm(Life.expectancy ~  Income.composition.of.resources + Schooling + BMI +
thinness.5.9.years + HIV.AIDS + Adult.Mortality,
train.2014)
summary(train.2014.restricted.lm)
# Residuals:
#   Min      1Q  Median      3Q     Max
# -8.4703 -1.9701  0.0248  1.7024  7.8928
#
# Coefficients:
#                                 Estimate  Std. Error t value  Pr(>|t|)
# (Intercept)                      61.5728     1.8579  33.142  < 2e-16 ***
# Income.composition.of.resources  20.5350     3.6603   5.610 2.47e-07 ***
# Schooling                         1.9825     4.3349   0.457 0.648598
# BMI                               0.5165     1.8169   0.284 0.776880
# thinness.5.9.years               -3.4692     2.6446  -1.312 0.193110
# HIV.AIDS                         -7.4213     2.3618  -3.142 0.002309 **
# Adult.Mortality                  -8.1121     2.3679  -3.426 0.000946 ***
#   ---
#   Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
#
# Residual standard error: 3.12 on 85 degrees of freedom
# Multiple R-squared:  0.891,	Adjusted R-squared:  0.8833
# F-statistic: 115.8 on 6 and 85 DF,  p-value: < 2.2e-16
#iii.Unrestricted Model: Perform Linear Model (training data, all predictors)
# . . . . . . . . . . . . . . . .
# Perform linear model using
#   - training data
#   - all predictors to life expectancy
train.2014.unrestricted.lm <- lm(Life.expectancy ~  Income.composition.of.resources + Schooling + BMI +
Alcohol + GDP + percentage.expenditure + Polio + Diphtheria + Polio +
Total.expenditure + Hepatitis.B +
Population + Measles + infant.deaths + under.five.deaths + thinness..1.19.years +
thinness.5.9.years + HIV.AIDS + Adult.Mortality,
train.2014)
summary(train.2014.unrestricted.lm)
# Residuals:
#   Min      1Q  Median      3Q     Max
# -8.9632 -1.8004  0.0834  1.5815  7.7089
#
# Coefficients:
#                               Estimate    Std. Error t value   Pr(>|t|)
# (Intercept)                      62.0314     2.4454  25.367  < 2e-16 ***
# Income.composition.of.resources  19.8332     4.3730   4.535 2.21e-05 ***
# Schooling                         0.5081     4.8345   0.105  0.91658
# BMI                               0.1244     2.1316   0.058  0.95363
# Alcohol                           0.5018     1.8477   0.272  0.78670
# GDP                              -5.3471     8.2454  -0.648  0.51870
# percentage.expenditure            6.8936     7.8345   0.880  0.38180
# Polio                            -1.9991     2.4720  -0.809  0.42133
# Diphtheria                        0.7043     4.8694   0.145  0.88540
# Total.expenditure                 1.2050     1.9959   0.604  0.54788
# Hepatitis.B                       2.1176     4.1934   0.505  0.61509
# Population                        8.0152    25.2668   0.317  0.75198
# Measles                          -5.8022    18.9642  -0.306  0.76051
# infant.deaths                    34.7934    74.3332   0.468  0.64113
# under.five.deaths               -31.9728    63.9492  -0.500  0.61860
# thinness..1.19.years              1.3293     9.3930   0.142  0.88785
# thinness.5.9.years               -7.1737     9.6642  -0.742  0.46029
# HIV.AIDS                         -7.1994     2.5314  -2.844  0.00578 **
# Adult.Mortality                  -8.5469     2.5946  -3.294  0.00152 **
#   ---
#   Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
#
# Residual standard error: 3.209 on 73 degrees of freedom
# Multiple R-squared:  0.901,	Adjusted R-squared:  0.8766
# F-statistic: 36.91 on 18 and 73 DF,  p-value: < 2.2e-16
cbind(Unrestricted=sum(train.2014.unrestricted.lm$residuals^2), Restricted=sum(train.2014.restricted.lm$residuals^2))
#       Unrestricted Restricted
# [1,]     751.6448   827.6418
# Thoughts........
# - Sum of Squares reduced with all predictors included.
# - Multiple low P-Valued predictors could be good candidates for final model inclusion.
# - What about colinearity?
# iv. Detecting Multicollinearity: Valuation Inflation Factor
# . . . . . . . . . . . . . . . .
# - Evaluate the Variance Inflation Factor (VIF) for each predictor in the model
# - VIF informs us how much the variance of the coefficient estimate increases for a
#   predictor when including it in the same model as the other predictors,
#   or in other words to what factor the precision of the estimate will be harmed and the
#   confidence interval will be widened.
# - For a particular variable, VIF is calculated by performing a regression with that variable as
#   the response and the other variables as the predictors.
# - VIF lower bound: 1 (two predictors are completely uncorrelated, VIF=1)
# the variance of the estimates are 1x greater when the predictors are included together
# (i.e., the variance is unchanged).
# - Upper acceptable bound: 5 (if include predictors with values above this threshold,
# need to be aware that estimate precision is likely to be significantly affected).
# If 2 variables are highly correlated they will both have a high VIF value
#library(car)
# --Restricted Model--
VIF.2014.restricted <- vif(train.2014.restricted.lm)
# Income.composition.of.resources     Schooling
# 9.380275                            6.562013
# BMI                                 thinness.5.9.years
# 2.260136                            1.707137
# HIV.AIDS                            Adult.Mortality
# 1.879727                            2.615192
# --Unrestricted Model--
VIF.2014.unrestricted <- vif(train.2014.unrestricted.lm)
# Income.composition.of.resources       Schooling
# 12.660749                             7.718027
# BMI                                   Alcohol
# 2.941881                              2.324621
# GDP                                   percentage.expenditure
# 12.124875                             11.858110
# Polio                                 Diphtheria
# 3.046543                              10.582413
# Total.expenditure                     Hepatitis.B
# 1.440861                              8.851350
# Population                            Measles
# 62.971477                             35.446782
# infant.deaths                         under.five.deaths
# 730.701956                            594.602826
# thinness..1.19.years                  thinness.5.9.years
# 20.385306                             21.558925
# HIV.AIDS                              Adult.Mortality
# 2.042069                              2.969129
# Note:
#   - Variance of infant.deaths and under.five.deaths are inflated several hundred times
# v. Predictor Selection Using Akaike Information Criteria (AIC)
# . . . . . . . . . . . . . . . .
# - At each iteration, the function will provide the AIC for the current model
#   and the corresponding AIC if we were to remove any predictors or add a
#   predictor not included back in.
# First, run model without inclusion of infant.deaths and under.five.deaths
train.2014.unrestricted.lm <- lm(Life.expectancy ~  Income.composition.of.resources + Schooling + BMI +
Alcohol + GDP + percentage.expenditure + Polio + Diphtheria + Polio +
Total.expenditure + Hepatitis.B +
Population + Measles + thinness..1.19.years +
thinness.5.9.years + HIV.AIDS + Adult.Mortality,
train.2014)
step(train.2014.unrestricted.lm, direction="both")
# The lowest AIC contained the following:
# lm(formula = Life.expectancy ~ Income.composition.of.resources +
#      Population + thinness.5.9.years + HIV.AIDS + Adult.Mortality,
#    data = train.2014)
# vi. Run Final Training Model
# . . . . . . . . . . . . . . . .
final.train.2014.lm <- lm(Life.expectancy ~ Income.composition.of.resources +
Population + thinness.5.9.years + HIV.AIDS + Adult.Mortality,
data = train.2014)
summary(final.train.2014.lm)
# vii. Run Testing Model
# . . . . . . . . . . . . . . . .
test.2014.lm <- lm(Life.expectancy ~ Income.composition.of.resources +
Population + thinness.5.9.years + HIV.AIDS + Adult.Mortality,
data = train.2014)
summary(test.2014.lm)
# Residuals:
#   Min      1Q  Median      3Q     Max
# -8.3022 -2.0574  0.2539  1.5795  7.9182
#
# Coefficients:
#   Estimate Std. Error t value Pr(>|t|)
# (Intercept)                       62.713      1.768  35.467  < 2e-16 ***
# Income.composition.of.resources   21.388      1.900  11.259  < 2e-16 ***
# Population                         5.642      3.947   1.429 0.156536
# thinness.5.9.years                -6.597      3.057  -2.158 0.033714 *
# HIV.AIDS                          -7.346      2.293  -3.204 0.001902 **
# Adult.Mortality                   -7.994      2.303  -3.471 0.000814 ***
#   ---
#   Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
#
# Residual standard error: 3.071 on 86 degrees of freedom
# Multiple R-squared:  0.8932,	Adjusted R-squared:  0.887
# F-statistic: 143.8 on 5 and 86 DF,  p-value: < 2.2e-16
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# Model Conclusions:
#   -  ASD
#   -  WS
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# viii. Visualize Linear Model Results
# . . . . . . . . . . . . . . . .
# https://datascienceplus.com/machine-learning-results-in-r-one-plot-to-rule-them-all-part-2-regression-models/
test.2014.lm.predictions <- data.frame(predict(test.2014.lm, test.2014))
dim(test.2014.lm.predictions)
data.vs.results.test.2014 <- cbind(test.2014[,1:4], test.2014.lm.predictions)
lares::mplot_lineal(tag = data.vs.results.test.2014$Life.expectancy,
score = data.vs.results.test.2014[,5],
subtitle = "Longevity Model",
model_name = "test.2014.lm")
lares::mplot_cuts_error(tag = data.vs.results.test.2014$Life.expectancy,
score = data.vs.results.test.2014[,5],
title = "Longevity Model",
model_name = "test.2014.lm")
lares::mplot_density(tag = data.vs.results.test.2014$Life.expectancy,
score = data.vs.results.test.2014[,5],
subtitle = "Longevity Model",
model_name = "test.2014.lm")
lares::mplot_full(tag = data.vs.results.test.2014$Life.expectancy,
score = data.vs.results.test.2014[,5],
subtitle = "Longevity Model",
model_name = "test.2014.lm",
save = T)
lares::mplot_splits(tag = data.vs.results.test.2014$Life.expectancy,
score = data.vs.results.test.2014[,5],
split = 6)
# 7. Classification Modeling
# ------------------------------------------
# Data set doesn't contain categorical variables.
# Therefore, add column detailing (0 or 1) whether or not life expectancy >= 65.
# a. Load, Clean and Scale Data
# ..........................................
dat.L <- read.csv("Life Expectancy Data Logistic Regression.csv")
# Extract 2014 data  for Analysis Only  (**Attempt with all years data**)
dat2014.L <- subset (dat.L, dat.L$Year==2014)
# Remove Rows with NA
dat2014.L <- na.omit(dat2014.L)
dim(dat2014.L)
# Normalize dat2014
dat2014N.L <- sapply(dat2014.L[,5:23], function(z) (z-min(z))/(max(z)-min(z)))
# Column bind first 4 columns of dat2014 with dat2014N
dat2014N.L <- cbind(dat2014.L[,1:4], dat2014N.L)
dim(dat2014N.L)  # [1] 131  23
# Reassign Index Numbers to Consecutive Sequence
rownames(dat2014N.L) <- 1:nrow(dat2014N.L)
# b. Perform Generalized Linear Model
# ..........................................
# i. Convert Dependent Variable to Type Factor
# . . . . . . . . . . . . . . . .
# Since the dependent variable is categorical and not numeric,
# convert it to type factor for logistic regression and subsequent analysis.
Response <- as.factor(dat2014N.L$LE..65)
# ii. Run Model / Obtain Log(odds)
# . . . . . . . . . . . . . . . .
# Note: For this model, use the same 5 predictors as the final linear model.
log.reg <- glm(Response ~ Income.composition.of.resources + Population +
thinness.5.9.years + HIV.AIDS + Adult.Mortality,
family="binomial", data=dat2014N.L)
summary(log.reg)
# Deviance Residuals:
#   Min        1Q    Median        3Q       Max
# -2.18871   0.00000   0.00012   0.00184   1.58287
#
# Coefficients:
#                                 Estimate  Std. Error z value  Pr(>|z|)
# (Intercept)                       -7.396      3.681  -2.009   0.0445 *
# Income.composition.of.resources   36.672     16.104   2.277   0.0228 *
# Population                        -2.519     15.284  -0.165   0.8691
# thinness.5.9.years                 0.989      4.476   0.221   0.8251
# HIV.AIDS                         -35.117     18.584  -1.890   0.0588 .
# Adult.Mortality                   -4.490      3.843  -1.168   0.2427
# ---
#   Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
#
# (Dispersion parameter for binomial family taken to be 1)
#
# Null deviance: 147.879  on 130  degrees of freedom
# Residual deviance:  14.589  on 125  degrees of freedom
# AIC: 26.589
#
# Number of Fisher Scoring iterations: 11
#iii. Define Classification Rule / Make Predictions
# ..........................................
# Define Log of Odds >= 0.5 as pass, 1
#        Log of Odds <  0.5 as fail, 0
predictions <- log.reg$fitted.values
predictions[predictions>=0.5] <- 1
predictions[predictions<0.5] <- 0
predictions <- as.factor(predictions)
# iv. Create Confusion Matrix and Statistics - Compare Predicted Classes to Actual
# ..........................................
library(caret)
confusionMatrix(predictions, Response, mode="prec_recall", positive = "1")
# Reference
# Prediction     0  1
#             0 32  1
#             1  1 97
#
# Accuracy : 0.9847
# 95% CI : (0.9459, 0.9981)
# No Information Rate : 0.7481
# P-Value [Acc > NIR] : 3.109e-14
#
# Kappa : 0.9595
#
# Mcnemar's Test P-Value : 1
#
#               Precision : 0.9898
#                  Recall : 0.9898
#                      F1 : 0.9898
#              Prevalence : 0.7481
#          Detection Rate : 0.7405
#    Detection Prevalence : 0.7481
#       Balanced Accuracy : 0.9797
#
#        'Positive' Class : 1
# Model Results: Excellent model for predicting life expectancy >= 65
# rm(list = ls())      Removes global environment
plot1a <- dat2014 %>%
ggplot(aes(x = "All Countries", y = Life.expectancy)) +
geom_jitter(width = .025, height = 0, size = 2, alpha = .5, color = "blue") +
labs(x = "", y="Life Expectancy")
plot1 <- dat2014 %>%
ggplot(aes(x = "All Countries", y = Alcohol)) +
geom_jitter(width = .025, height = 0, size = 2, alpha = .5, color = "blue") +
labs(x = "", y="Alcohol")
plot2 <- dat2014 %>%
ggplot(aes(x = "All Countries", y = infant.deaths)) +
geom_jitter(width = .025, height = 0, size = 2, alpha = .5, color = "orange") +
labs(x = "", y="Infant Deaths")
plot3 <- dat2014 %>%
ggplot(aes(x = "All Countries", y = percentage.expenditure)) +
geom_jitter(width = .025, height = 0, size = 2, alpha = .5, color = "green") +
labs(x = "", y="% Expenditure")
plot4 <- dat2014 %>%
ggplot(aes(x = "All Countries", y = Hepatitis.B)) +
geom_jitter(width = .025, height = 0, size = 2, alpha = .5, color = "red") +
labs(x = "", y="Hepatitis B")
plot5 <- dat2014 %>%
ggplot(aes(x = "All Countries", y = Measles)) +
geom_jitter(width = .025, height = 0, size = 2, alpha = .5, color = "violet") +
labs(x = "", y="Measles")
plot6 <- dat2014 %>%
ggplot(aes(x = "All Countries", y = BMI)) +
geom_jitter(width = .025, height = 0, size = 2, alpha = .5, color = "yellow") +
labs(x = "", y="Body Mass Index")
plot7 <- dat2014 %>%
ggplot(aes(x = "All Countries", y = Polio)) +
geom_jitter(width = .025, height = 0, size = 2, alpha = .5, color = "black") +
labs(x = "", y="Polio")
plot8 <- dat2014 %>%
ggplot(aes(x = "All Countries", y = Diphtheria)) +
geom_jitter(width = .025, height = 0, size = 2, alpha = .5, color = "blue") +
labs(x = "", y="Diphtheria")
plot9 <- dat2014 %>%
ggplot(aes(x = "All Countries", y =  HIV.AIDS)) +
geom_jitter(width = .025, height = 0, size = 2, alpha = .5, color = "blue") +
labs(x = "", y=" HIV/AIDS")
plot10 <- dat2014 %>%
ggplot(aes(x = "All Countries", y =  Schooling)) +
geom_jitter(width = .025, height = 0, size = 2, alpha = .5, color = "blue") +
labs(x = "", y="Schooling")
plot11 <- dat2014 %>%
ggplot(aes(x = "All Countries", y =  GDP)) +
geom_jitter(width = .025, height = 0, size = 2, alpha = .5, color = "blue") +
labs(x = "", y="GDP")
grid.arrange(plot1a, plot1, plot2, plot3, plot4, plot5, plot6, plot7, plot8,
plot9, plot10, plot11)
summary(dat2014N[,4:22])
corrplot(cor(dat2014N[5:22]), order="hclust")
test.2014.lm <- lm(Life.expectancy ~ Income.composition.of.resources +
Population + thinness.5.9.years + HIV.AIDS + Adult.Mortality,
data = test.2014)
summary(test.2014.lm)
test.2014.lm.predictions <- data.frame(predict(test.2014.lm, test.2014))
dim(test.2014.lm.predictions)
data.vs.results.test.2014 <- cbind(test.2014[,1:4], test.2014.lm.predictions)
lares::mplot_lineal(tag = data.vs.results.test.2014$Life.expectancy,
score = data.vs.results.test.2014[,5],
subtitle = "Longevity Model",
model_name = "test.2014.lm")
lares::mplot_cuts_error(tag = data.vs.results.test.2014$Life.expectancy,
score = data.vs.results.test.2014[,5],
title = "Longevity Model",
model_name = "test.2014.lm")
lares::mplot_density(tag = data.vs.results.test.2014$Life.expectancy,
score = data.vs.results.test.2014[,5],
subtitle = "Longevity Model",
model_name = "test.2014.lm")
lares::mplot_full(tag = data.vs.results.test.2014$Life.expectancy,
score = data.vs.results.test.2014[,5],
subtitle = "Longevity Model",
model_name = "test.2014.lm",
save = T)
lares::mplot_splits(tag = data.vs.results.test.2014$Life.expectancy,
score = data.vs.results.test.2014[,5],
split = 6)
# 7. Classification Modeling
# ------------------------------------------
# Data set doesn't contain categorical variables.
# Therefore, add column detailing (0 or 1) whether or not life expectancy >= 65.
# a. Load, Clean and Scale Data
# ..........................................
dat.L <- read.csv("Life Expectancy Data Logistic Regression.csv")
# Extract 2014 data  for Analysis Only  (**Attempt with all years data**)
dat2014.L <- subset (dat.L, dat.L$Year==2014)
# Remove Rows with NA
dat2014.L <- na.omit(dat2014.L)
dim(dat2014.L)
# Normalize dat2014
dat2014N.L <- sapply(dat2014.L[,5:23], function(z) (z-min(z))/(max(z)-min(z)))
# Column bind first 4 columns of dat2014 with dat2014N
dat2014N.L <- cbind(dat2014.L[,1:4], dat2014N.L)
dim(dat2014N.L)  # [1] 131  23
# Reassign Index Numbers to Consecutive Sequence
rownames(dat2014N.L) <- 1:nrow(dat2014N.L)
# b. Perform Generalized Linear Model
# ..........................................
# i. Convert Dependent Variable to Type Factor
# . . . . . . . . . . . . . . . .
# Since the dependent variable is categorical and not numeric,
# convert it to type factor for logistic regression and subsequent analysis.
Response <- as.factor(dat2014N.L$LE..65)
# ii. Run Model / Obtain Log(odds)
# . . . . . . . . . . . . . . . .
# Note: For this model, use the same 5 predictors as the final linear model.
log.reg <- glm(Response ~ Income.composition.of.resources + Population +
thinness.5.9.years + HIV.AIDS + Adult.Mortality,
family="binomial", data=dat2014N.L)
summary(log.reg)
# Deviance Residuals:
#   Min        1Q    Median        3Q       Max
# -2.18871   0.00000   0.00012   0.00184   1.58287
#
# Coefficients:
#                                 Estimate  Std. Error z value  Pr(>|z|)
# (Intercept)                       -7.396      3.681  -2.009   0.0445 *
# Income.composition.of.resources   36.672     16.104   2.277   0.0228 *
# Population                        -2.519     15.284  -0.165   0.8691
# thinness.5.9.years                 0.989      4.476   0.221   0.8251
# HIV.AIDS                         -35.117     18.584  -1.890   0.0588 .
# Adult.Mortality                   -4.490      3.843  -1.168   0.2427
# ---
#   Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
#
# (Dispersion parameter for binomial family taken to be 1)
#
# Null deviance: 147.879  on 130  degrees of freedom
# Residual deviance:  14.589  on 125  degrees of freedom
# AIC: 26.589
#
# Number of Fisher Scoring iterations: 11
#iii. Define Classification Rule / Make Predictions
# ..........................................
# Define Log of Odds >= 0.5 as pass, 1
#        Log of Odds <  0.5 as fail, 0
predictions <- log.reg$fitted.values
predictions[predictions>=0.5] <- 1
predictions[predictions<0.5] <- 0
predictions <- as.factor(predictions)
# iv. Create Confusion Matrix and Statistics - Compare Predicted Classes to Actual
# ..........................................
library(caret)
confusionMatrix(predictions, Response, mode="prec_recall", positive = "1")
# Reference
# Prediction     0  1
#             0 32  1
#             1  1 97
#
# Accuracy : 0.9847
# 95% CI : (0.9459, 0.9981)
# No Information Rate : 0.7481
# P-Value [Acc > NIR] : 3.109e-14
#
# Kappa : 0.9595
#
# Mcnemar's Test P-Value : 1
#
#               Precision : 0.9898
#                  Recall : 0.9898
#                      F1 : 0.9898
#              Prevalence : 0.7481
#          Detection Rate : 0.7405
#    Detection Prevalence : 0.7481
#       Balanced Accuracy : 0.9797
#
#        'Positive' Class : 1
# Model Results: Excellent model for predicting life expectancy >= 65
summary(test.2014.lm)
confusionMatrix(predictions, Response, mode="prec_recall", positive = "1")
